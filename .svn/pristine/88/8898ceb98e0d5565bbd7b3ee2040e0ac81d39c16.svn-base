package in.zeitech.net.transporter;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;

import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;
import org.apache.http.util.EntityUtils;

import android.os.AsyncTask;
import android.text.TextUtils;
import android.util.Log;

/**
 * @author Pratik Popat 
 * 
 *  @info Server request transporter class for server API call
 *  implements GET and POST method 
 *
 */

public class Transporter implements Request{
	
	private AysncRequest serverCall;

	@Override
	public synchronized void fire(String url, String payload, Receiver receiver) {
		serverCall = new AysncRequest(url, payload, receiver);
		serverCall.execute();
	}

	@Override
	public synchronized void fire(String url, Receiver receiver) {
		serverCall = new AysncRequest(url, receiver);
		serverCall.execute();
	}
	
	@Override
	public synchronized void fire(String url) {
      //TODO :	code for fire and forget	
	}
	
	@Override
	public synchronized void fire() {
      //TODO :	code for fire and forget	
	}
	
	
	@Override
	public void stop(){
		try{
		serverCall.cancel(true);
		Log.e(this.getClass().getName(), "Request Canceled...");
		}catch (Exception e) {}
	}

	private class AysncRequest extends AsyncTask<Void, Void, Response> {

		private String url, payload;
		private Receiver receiver;
		private HttpClient client;

		public AysncRequest(String url, String payload, Receiver receiver) {
			this.url = url;
			this.payload = payload;
			this.receiver = receiver;
			HttpParams params = new BasicHttpParams();
		    HttpConnectionParams.setConnectionTimeout(params, 50000);
		    HttpConnectionParams.setSoTimeout(params, 50000);
			client = new DefaultHttpClient(params);

		}

		public AysncRequest(String url, Receiver receiver) {
			this.url = url;
			this.receiver = receiver;
			client = new DefaultHttpClient();

		}

		@Override
		protected Response doInBackground(Void... params) {
			if (payload != null && !TextUtils.isEmpty(payload))
				return executePostRequest();
			else
				return executeGetRequest();

		}

		@Override
		protected void onPostExecute(Response result) {
			if (result != null && receiver != null) {
				int code = result.getCode();
				String content = result.getContent();

				if (code == 200) {
					receiver.onSuccess(content);
				} else if (code == Response.ERROR_CODE) {
					receiver.onError(content);
				} else {
					receiver.onFailure(content);
				}
			}
			super.onPostExecute(result);
		}

		private Response executePostRequest() {
			HttpPost post = new HttpPost(url);
			try {
				Log.e(getClass().getName(), "POST: Requesting with : "+payload +" \nUrl:"+url);
				post.setEntity(new StringEntity(payload, "UTF-8"));
				try {
					HttpResponse res = client.execute(post);
					int statuscode = res.getStatusLine().getStatusCode();
					if (statuscode == 200) {
						String response  = readResponse(res);
						Log.e("Response", ""+response);
						return new Response(statuscode, response);
					} else {
						return new Response(statuscode, res.getStatusLine()
								.getReasonPhrase());
					}
				} catch (ClientProtocolException e) {
					Log.e("Caught inside client", e.getLocalizedMessage());
					e.printStackTrace();
					return new Response(Response.ERROR_CODE, ""+e.getLocalizedMessage());
				} catch (IOException e) {
					Log.e("Caught inside IOException", ""+ e.getLocalizedMessage());
					e.printStackTrace();
					return new Response(Response.ERROR_CODE, ""+e.getLocalizedMessage());
				}
			} catch (UnsupportedEncodingException e) {
				Log.e("Caught inside IOException", ""+e.getLocalizedMessage());
				e.printStackTrace();
				return new Response(Response.ERROR_CODE, ""+e.getLocalizedMessage());
			}
			catch (Exception e) {
				Log.e(this.getClass().getName(), ""+e.getLocalizedMessage());
				e.printStackTrace();
				return new Response(Response.ERROR_CODE, ""+e.getLocalizedMessage());
			}

		}

		private Response executeGetRequest() {
			HttpGet get = new HttpGet(url);
			try {
				Log.e(getClass().getName(), "GET : Requesting with : "+payload +" \nUrl:"+url);
				HttpResponse res = client.execute(get);
				int statuscode = res.getStatusLine().getStatusCode();
				if (statuscode == 200) {
					return new Response(statuscode, EntityUtils.toString(res
							.getEntity()));
				} else {
					return new Response(statuscode, res.getStatusLine()
							.getReasonPhrase());
				}
			} catch (ClientProtocolException e) {
				e.printStackTrace();
				return new Response(Response.ERROR_CODE, e.getLocalizedMessage());
			} catch (IOException e) {
				e.printStackTrace();
				return new Response(Response.ERROR_CODE, e.getLocalizedMessage());
			}
		}
		
		private String readResponse(HttpResponse response) {
			InputStream input = null;
			try {
				input = response.getEntity().getContent();
				ByteArrayOutputStream out = new ByteArrayOutputStream(1024);
				byte[] buffer = new byte[1024];
				int count;

				while ((count = input.read(buffer)) > 0) {
					out.write(buffer, 0, count);
				}
				return out.toString("UTF-8");
			}
			catch (UnsupportedEncodingException e) {
				throw new RuntimeException("The JVM does not support the compiler's default encoding.", e);
			}
			catch (IOException e) {
				return null;
			}
			finally {
				try {
					if (input != null) {
						input.close();
					}
				}
				catch (IOException ignored) {
				}
			}
		}

	}

	

}
